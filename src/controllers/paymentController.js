const paymentService = require("../services/paymentService");

class PaymentController {
  /**
   * L·∫•y danh s√°ch thanh to√°n c·ªßa sinh vi√™n ƒëang ƒëƒÉng nh·∫≠p
   * GET /api/payments
   */
  async getMyPayments(req, res) {
    try {
      const maSinhVien = req.user.MaSinhVien; // T·ª´ middleware auth
      const { page = 1, limit = 10, trangThai } = req.query;

      const result = await paymentService.getStudentPayments(maSinhVien, {
        page: parseInt(page),
        limit: parseInt(limit),
        trangThai,
      });

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
          errors: result.errors,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in getMyPayments:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * L·∫•y chi ti·∫øt thanh to√°n
   * GET /api/payments/:maThanhToan
   */
  async getPaymentDetail(req, res) {
    try {
      const { maThanhToan } = req.params;
      const maSinhVien = req.user.MaSinhVien;

      const result = await paymentService.getPaymentDetail(
        maThanhToan,
        maSinhVien
      );

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in getPaymentDetail:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * T·∫°o link thanh to√°n PayOS
   * POST /api/payments/:maThanhToan/create-payment-link
   */
  async createPaymentLink(req, res) {
    try {
      const { maThanhToan } = req.params;
      const maSinhVien = req.user.MaSinhVien;

      const result = await paymentService.createPaymentLink(
        maThanhToan,
        maSinhVien
      );

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
          errors: result.errors,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in createPaymentLink:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * X·ª≠ l√Ω thanh to√°n ti·ªÅn m·∫∑t
   * POST /api/payments/:maThanhToan/cash-payment
   */
  async processCashPayment(req, res) {
    try {
      const { maThanhToan } = req.params;
      const maSinhVien = req.user.MaSinhVien;

      const result = await paymentService.processCashPayment(
        maThanhToan,
        maSinhVien
      );

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
          errors: result.errors,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in processCashPayment:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * Webhook x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n t·ª´ PayOS
   * POST /api/payments/webhook/payos
   */
  async handlePayOSWebhook(req, res) {
    try {
      console.log("üîî PayOS Webhook received:");
      console.log("Headers:", JSON.stringify(req.headers, null, 2));
      console.log("Body:", JSON.stringify(req.body, null, 2));

      const webhookData = req.body;

      // PayOS sends signature in body, not headers
      const signature =
        webhookData.signature ||
        req.headers["x-signature"] ||
        req.headers["signature"] ||
        req.headers["payos-signature"];

      console.log("üîê Signature found:", signature ? "‚úÖ Yes" : "‚ùå No");
      console.log("üìù Signature value:", signature);

      if (!signature) {
        console.log("‚ùå Missing signature in both body and headers");
        return res.status(400).json({
          error: "Missing signature",
          receivedHeaders: Object.keys(req.headers),
          bodyKeys: Object.keys(webhookData),
          message: "Signature not found in body or headers",
        });
      }

      // Extract payment data (without signature for verification)
      const { signature: _, ...paymentData } = webhookData;

      const result = await paymentService.handlePayOSWebhook({
        data: paymentData,
        signature,
      });

      console.log("üìä Webhook processing result:", result);

      if (!result.success) {
        console.log("‚ùå Webhook processing failed:", result.message);
        return res.status(400).json({ message: result.message });
      }

      console.log("‚úÖ Webhook processed successfully");
      return res
        .status(200)
        .json({ message: "Webhook processed successfully" });
    } catch (error) {
      console.error("üí• Error in handlePayOSWebhook:", error);
      return res.status(500).json({
        message: "Webhook processing failed",
        error: error.message,
      });
    }
  }

  /**
   * L·∫•y th·ªëng k√™ thanh to√°n c·ªßa sinh vi√™n
   * GET /api/payments/stats
   */
  async getPaymentStats(req, res) {
    try {
      const maSinhVien = req.user.MaSinhVien;

      const result = await paymentService.getPaymentStats(maSinhVien);

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
          errors: result.errors,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in getPaymentStats:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
   * GET /api/payments/:maThanhToan/status
   */
  async checkPaymentStatus(req, res) {
    try {
      const { maThanhToan } = req.params;
      const maSinhVien = req.user.MaSinhVien;

      const result = await paymentService.getPaymentDetail(
        maThanhToan,
        maSinhVien
      );

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
        });
      }

      return res.status(200).json({
        success: true,
        data: {
          maThanhToan: result.data.MaThanhToan,
          trangThai: result.data.TrangThai,
          soTien: result.data.SoTien,
          hinhThuc: result.data.HinhThuc,
          ngayThanhToan: result.data.NgayThanhToan,
        },
        message: "L·∫•y tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng",
      });
    } catch (error) {
      console.error("Error in checkPaymentStatus:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * API cho admin ƒë√°nh d·∫•u thanh to√°n qu√° h·∫°n (ch·∫°y manually ho·∫∑c cron job)
   * POST /api/payments/mark-overdue
   */
  async markOverduePayments(req, res) {
    try {
      // Ki·ªÉm tra quy·ªÅn admin (implement theo h·ªá th·ªëng auth hi·ªán t·∫°i)
      if (req.user.role !== "admin") {
        return res.status(403).json({
          success: false,
          message: "Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y",
        });
      }

      const result = await paymentService.markOverduePayments();

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
          errors: result.errors,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in markOverduePayments:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * Redirect handler cho PayOS return URL
   * GET /api/payments/return
   */
  async handlePaymentReturn(req, res) {
    try {
      const { orderCode, status } = req.query;

      if (status === "PAID") {
        // Redirect to success page
        return res.redirect(
          `${process.env.FRONTEND_URL}/payments/success?orderCode=${orderCode}`
        );
      } else if (status === "CANCELLED") {
        // Redirect to cancel page
        return res.redirect(
          `${process.env.FRONTEND_URL}/payments/cancelled?orderCode=${orderCode}`
        );
      } else {
        // Redirect to failure page
        return res.redirect(
          `${process.env.FRONTEND_URL}/payments/failed?orderCode=${orderCode}`
        );
      }
    } catch (error) {
      console.error("Error in handlePaymentReturn:", error);
      return res.redirect(`${process.env.FRONTEND_URL}/payments/failed`);
    }
  }

  /**
   * Cancel handler cho PayOS cancel URL
   * GET /api/payments/cancel
   */
  async handlePaymentCancel(req, res) {
    try {
      const { orderCode } = req.query;

      // C√≥ th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n v·ªÅ CHUA_THANH_TOAN n·∫øu c·∫ßn
      // const result = await paymentService.cancelPayment(orderCode);

      return res.redirect(
        `${process.env.FRONTEND_URL}/payments/cancelled?orderCode=${orderCode}`
      );
    } catch (error) {
      console.error("Error in handlePaymentCancel:", error);
      return res.redirect(`${process.env.FRONTEND_URL}/payments/failed`);
    }
  }

  // ===== ADMIN METHODS =====

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ thanh to√°n (Admin)
   * GET /api/admin/payments
   */
  async getAllPayments(req, res) {
    try {
      const {
        page = 1,
        limit = 10,
        search = "",
        status = "",
        type = "",
        month = "",
        startDate = "",
        endDate = "",
      } = req.query;

      const result = await paymentService.getAllPayments({
        page: parseInt(page),
        limit: parseInt(limit),
        search,
        status,
        type,
        month,
        startDate,
        endDate,
      });

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
          errors: result.errors,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in getAllPayments:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * L·∫•y th·ªëng k√™ t·ªïng h·ª£p thanh to√°n (Admin)
   * GET /api/admin/payments/stats
   */
  async getAdminPaymentStats(req, res) {
    try {
      const result = await paymentService.getAdminPaymentStats();

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in getAdminPaymentStats:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * Ph√™ duy·ªát thanh to√°n ti·ªÅn m·∫∑t (Admin)
   * POST /api/admin/payments/:maThanhToan/approve-cash
   */
  async approveCashPayment(req, res) {
    try {
      const { maThanhToan } = req.params;
      const { note } = req.body;
      const adminId = req.user.MaNhanVien;

      const result = await paymentService.approveCashPayment(maThanhToan, {
        adminId,
        note,
      });

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in approveCashPayment:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }

  /**
   * T·ª´ ch·ªëi thanh to√°n ti·ªÅn m·∫∑t (Admin)
   * POST /api/admin/payments/:maThanhToan/reject-cash
   */
  async rejectCashPayment(req, res) {
    try {
      const { maThanhToan } = req.params;
      const { reason } = req.body;
      const adminId = req.user.MaNhanVien;

      const result = await paymentService.rejectCashPayment(maThanhToan, {
        adminId,
        reason,
      });

      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message,
        });
      }

      return res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
      });
    } catch (error) {
      console.error("Error in rejectCashPayment:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng",
      });
    }
  }
}

module.exports = new PaymentController();
