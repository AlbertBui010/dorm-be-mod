const nodemailer = require("nodemailer");

class EmailService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  initializeTransporter() {
    try {
      // C·∫•u h√¨nh email transporter
      this.transporter = nodemailer.createTransport({
        host:
          process.env.EMAIL_HOST || process.env.SMTP_HOST || "smtp.gmail.com",
        port: process.env.EMAIL_PORT || process.env.SMTP_PORT || 587,
        secure: false, // true for 465, false for other ports
        auth: {
          user: process.env.EMAIL_USER || process.env.SMTP_USER,
          pass: process.env.EMAIL_PASSWORD || process.env.SMTP_PASS,
        },
      });

      // Verify connection configuration
      this.transporter.verify((error, success) => {
        if (error) {
          console.error("Email transporter verification failed:", error);
          // Trong development mode, c√≥ th·ªÉ b·ªè qua l·ªói n√†y
          if (process.env.NODE_ENV === "development") {
            console.log("Development mode: Email verification skipped");
          }
        } else {
          console.log("Email server is ready to take our messages");
        }
      });
    } catch (error) {
      console.error("Failed to initialize email transporter:", error);
      // Trong development mode, kh√¥ng crash ·ª©ng d·ª•ng
      if (process.env.NODE_ENV === "development") {
        console.log(
          "Development mode: Email transporter initialization failed but continuing..."
        );
      }
    }
  }

  /**
   * G·ª≠i email
   * @param {Object} emailOptions - T√πy ch·ªçn email
   * @param {string} emailOptions.to - Email ng∆∞·ªùi nh·∫≠n
   * @param {string} emailOptions.subject - Ti√™u ƒë·ªÅ email
   * @param {string} emailOptions.text - N·ªôi dung text thu·∫ßn
   * @param {string} emailOptions.html - N·ªôi dung HTML
   * @param {string} emailOptions.from - Email ng∆∞·ªùi g·ª≠i (optional)
   */
  async sendEmail(emailOptions) {
    try {
      if (!this.transporter) {
        console.warn(
          "Email transporter not initialized, attempting to reinitialize..."
        );
        this.initializeTransporter();

        // N·∫øu v·∫´n kh√¥ng c√≥ transporter v√† ƒëang ·ªü development mode, simulate vi·ªác g·ª≠i email
        if (!this.transporter && process.env.NODE_ENV === "development") {
          console.log("Development mode: Email sending simulated");
          return {
            success: true,
            messageId: "dev-mode-" + Date.now(),
            message: "Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng (Development mode).",
          };
        }

        if (!this.transporter) {
          throw new Error("Email transporter not initialized");
        }
      }

      const mailOptions = {
        from:
          emailOptions.from ||
          process.env.EMAIL_USER ||
          process.env.SMTP_FROM ||
          process.env.SMTP_USER,
        to: emailOptions.to,
        subject: emailOptions.subject,
        text: emailOptions.text,
        html: emailOptions.html,
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log("Email sent successfully:", result.messageId);
      return {
        success: true,
        messageId: result.messageId,
        message: "Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.",
      };
    } catch (error) {
      console.error("Failed to send email:", error);

      // Trong m√¥i tr∆∞·ªùng development, c√≥ th·ªÉ b·ªè qua l·ªói email
      if (process.env.NODE_ENV === "development") {
        console.log("Development mode: Email sending simulated");
        return {
          success: true,
          messageId: "dev-mode-" + Date.now(),
          message: "Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng (Development mode).",
        };
      }

      throw new Error(`Kh√¥ng th·ªÉ g·ª≠i email: ${error.message}`);
    }
  }

  /**
   * G·ª≠i email x√°c th·ª±c ƒëƒÉng k√Ω
   */
  async sendVerificationEmail(to, userName, verificationToken) {
    const verificationLink = `${process.env.FRONTEND_URL}/verify-email?token=${verificationToken}`;

    const emailOptions = {
      to: to,
      subject:
        "X√°c th·ª±c email ƒëƒÉng k√Ω k√Ω t√∫c x√° - Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n",
      html: this.getVerificationEmailTemplate(
        userName,
        verificationLink,
        verificationToken
      ),
    };

    return await this.sendEmail(emailOptions);
  }

  /**
   * G·ª≠i email th√¥ng b√°o m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
   */
  async sendPasswordSetupConfirmation(to, userName, maSinhVien) {
    const loginLink = `${process.env.FRONTEND_URL}/login`;

    const emailOptions = {
      to: to,
      subject: "ƒêƒÉng k√Ω k√Ω t√∫c x√° ho√†n t·∫•t - Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n",
      html: this.getPasswordSetupConfirmationTemplate(
        userName,
        maSinhVien,
        loginLink
      ),
    };

    return await this.sendEmail(emailOptions);
  }

  /**
   * Template email x√°c th·ª±c
   */
  getVerificationEmailTemplate(userName, verificationLink, token) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>X√°c th·ª±c email ƒëƒÉng k√Ω k√Ω t√∫c x√°</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #2563eb; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background-color: #f9fafb; padding: 30px; border-radius: 0 0 8px 8px; }
          .button { display: inline-block; background-color: #2563eb; color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 20px 0; }
          .button:hover { background-color: #1d4ed8; }
          .token-box { background-color: #e5e7eb; padding: 15px; border-radius: 6px; margin: 15px 0; word-break: break-all; font-family: monospace; }
          .footer { margin-top: 30px; font-size: 12px; color: #6b7280; border-top: 1px solid #e5e7eb; padding-top: 20px; }
          .logo { font-size: 24px; font-weight: bold; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üè¢ K√Ω t√∫c x√° STU</div>
            <h1 style="margin: 10px 0 0 0; font-size: 20px;">X√°c th·ª±c email ƒëƒÉng k√Ω</h1>
          </div>
          
          <div class="content">
            <h2 style="color: #2563eb; margin-top: 0;">Xin ch√†o ${userName}!</h2>
            
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω ·ªü k√Ω t√∫c x√° <strong>Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n</strong>.</p>
            
            <p>ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n b·∫±ng c√°ch nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi:</p>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${verificationLink}" class="button">‚úÖ X√°c th·ª±c Email</a>
            </div>
            
            <p>Ho·∫∑c b·∫°n c√≥ th·ªÉ copy ƒë∆∞·ªùng link sau v√†o tr√¨nh duy·ªát:</p>
            <div class="token-box">${verificationLink}</div>
            
            <p><strong>M√£ x√°c th·ª±c c·ªßa b·∫°n:</strong></p>
            <div class="token-box">${token}</div>
            
            <div style="background-color: #fef3cd; border: 1px solid #facc15; padding: 15px; border-radius: 6px; margin: 20px 0;">
              <p style="margin: 0; color: #92400e;"><strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong></p>
              <ul style="margin: 10px 0 0 0; color: #92400e;">
                <li>Link x√°c th·ª±c n√†y s·∫Ω h·∫øt h·∫°n sau <strong>24 gi·ªù</strong></li>
                <li>Sau khi x√°c th·ª±c email, b·∫°n s·∫Ω c·∫ßn thi·∫øt l·∫≠p m·∫≠t kh·∫©u</li>
                <li>ƒêƒÉng k√Ω c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i "CH·ªú DUY·ªÜT"</li>
              </ul>
            </div>
            
            <p>Sau khi x√°c th·ª±c email th√†nh c√¥ng, b·∫°n s·∫Ω c√≥ th·ªÉ:</p>
            <ul>
              <li>üîë Thi·∫øt l·∫≠p m·∫≠t kh·∫©u cho t√†i kho·∫£n</li>
              <li>üè† Theo d√µi t√¨nh tr·∫°ng ƒëƒÉng k√Ω ph√≤ng</li>
              <li>üìß Nh·∫≠n th√¥ng b√°o v·ªÅ k·∫øt qu·∫£ ph√™ duy·ªát</li>
            </ul>
          </div>
          
          <div class="footer">
            <p><strong>üè¢ Ph√≤ng Qu·∫£n l√Ω K√Ω t√∫c x√°</strong><br>
            Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n<br>
            üìß Email: ktx@stu.edu.vn | ‚òéÔ∏è Hotline: 0929812000</p>
            
            <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω n√†y, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Template email x√°c nh·∫≠n thi·∫øt l·∫≠p m·∫≠t kh·∫©u
   */
  getPasswordSetupConfirmationTemplate(userName, maSinhVien, loginLink) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ƒêƒÉng k√Ω k√Ω t√∫c x√° ho√†n t·∫•t</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #16a34a; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background-color: #f9fafb; padding: 30px; border-radius: 0 0 8px 8px; }
          .button { display: inline-block; background-color: #16a34a; color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 20px 0; }
          .button:hover { background-color: #15803d; }
          .info-box { background-color: #dcfce7; border: 1px solid #16a34a; padding: 15px; border-radius: 6px; margin: 15px 0; }
          .footer { margin-top: 30px; font-size: 12px; color: #6b7280; border-top: 1px solid #e5e7eb; padding-top: 20px; }
          .logo { font-size: 24px; font-weight: bold; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üè¢ K√Ω t√∫c x√° STU</div>
            <h1 style="margin: 10px 0 0 0; font-size: 20px;">üéâ ƒêƒÉng k√Ω ho√†n t·∫•t!</h1>
          </div>
          
          <div class="content">
            <h2 style="color: #16a34a; margin-top: 0;">Ch√∫c m·ª´ng ${userName}!</h2>
            
            <p>B·∫°n ƒë√£ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω ·ªü k√Ω t√∫c x√° <strong>Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n</strong>.</p>
            
            <div class="info-box">
              <p style="margin: 0;"><strong>üìã Th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n:</strong></p>
              <ul style="margin: 10px 0 0 0;">
                <li><strong>M√£ sinh vi√™n:</strong> ${maSinhVien}</li>
                <li><strong>H·ªç t√™n:</strong> ${userName}</li>
                <li><strong>Tr·∫°ng th√°i:</strong> Ch·ªù duy·ªát</li>
              </ul>
            </div>
            
            <p>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng ƒë·ªÉ theo d√µi t√¨nh tr·∫°ng ƒëƒÉng k√Ω:</p>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${loginLink}" class="button">üîë ƒêƒÉng nh·∫≠p ngay</a>
            </div>
            
            <div style="background-color: #dbeafe; border: 1px solid #2563eb; padding: 15px; border-radius: 6px; margin: 20px 0;">
              <p style="margin: 0; color: #1e40af;"><strong>üìù C√°c b∆∞·ªõc ti·∫øp theo:</strong></p>
              <ol style="margin: 10px 0 0 0; color: #1e40af;">
                <li>ƒêƒÉng k√Ω c·ªßa b·∫°n ƒëang trong tr·∫°ng th√°i <strong>"CH·ªú DUY·ªÜT"</strong></li>
                <li>Ph√≤ng Qu·∫£n l√Ω K√Ω t√∫c x√° s·∫Ω xem x√©t v√† ph√™ duy·ªát ƒëƒÉng k√Ω</li>
                <li>B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email th√¥ng b√°o k·∫øt qu·∫£</li>
                <li>N·∫øu ƒë∆∞·ª£c duy·ªát, b·∫°n s·∫Ω ƒë∆∞·ª£c h∆∞·ªõng d·∫´n l√†m th·ªß t·ª•c nh·∫≠n ph√≤ng</li>
              </ol>
            </div>
            
            <p>Trong th·ªùi gian ch·ªù duy·ªát, b·∫°n c√≥ th·ªÉ:</p>
            <ul>
              <li>üîç Theo d√µi t√¨nh tr·∫°ng ƒëƒÉng k√Ω tr√™n h·ªá th·ªëng</li>
              <li>üìù C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n (n·∫øu c·∫ßn)</li>
              <li>üìû Li√™n h·ªá Ph√≤ng Qu·∫£n l√Ω n·∫øu c√≥ th·∫Øc m·∫Øc</li>
            </ul>
          </div>
          
          <div class="footer">
            <p><strong>üè¢ Ph√≤ng Qu·∫£n l√Ω K√Ω t√∫c x√°</strong><br>
            Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n<br>
            üìß Email: ktx@stu.edu.vn | ‚òéÔ∏è Hotline: 0929812000<br>
            üè† ƒê·ªãa ch·ªâ: 180 Cao L·ªó, Ph∆∞·ªùng 4, Qu·∫≠n 8, TP HCM</p>
            
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªõng v√† l·ª±a ch·ªçn k√Ω t√∫c x√° c·ªßa ch√∫ng t√¥i!</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * G·ª≠i email th√¥ng b√°o duy·ªát ƒëƒÉng k√Ω
   */
  async sendApprovalEmail({
    email,
    hoTen,
    maSinhVien,
    maPhong, // T√™n ph√≤ng (SoPhong)
    maGiuong, // S·ªë gi∆∞·ªùng (SoGiuong)
    ngayNhanPhong,
  }) {
    const loginLink = `${process.env.FRONTEND_URL}/login`;

    const emailOptions = {
      to: email,
      subject:
        "‚úÖ ƒêƒÉng k√Ω k√Ω t√∫c x√° ƒë√£ ƒë∆∞·ª£c duy·ªát - Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n",
      html: this.getApprovalEmailTemplate(
        hoTen,
        maSinhVien,
        maPhong, // T√™n ph√≤ng
        maGiuong, // S·ªë gi∆∞·ªùng
        ngayNhanPhong,
        loginLink
      ),
    };

    return await this.sendEmail(emailOptions);
  }

  /**
   * G·ª≠i email th√¥ng b√°o t·ª´ ch·ªëi ƒëƒÉng k√Ω
   */
  async sendRejectionEmail({ email, hoTen, lyDoTuChoi }) {
    const emailOptions = {
      to: email,
      subject:
        "‚ùå ƒêƒÉng k√Ω k√Ω t√∫c x√° kh√¥ng ƒë∆∞·ª£c duy·ªát - Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n",
      html: this.getRejectionEmailTemplate(hoTen, lyDoTuChoi),
    };

    return await this.sendEmail(emailOptions);
  }

  /**
   * Template email duy·ªát ƒëƒÉng k√Ω
   */
  getApprovalEmailTemplate(
    hoTen,
    maSinhVien,
    tenPhong, // T√™n ph√≤ng (v√≠ d·ª•: A303)
    soGiuong, // S·ªë gi∆∞·ªùng (v√≠ d·ª•: G01)
    ngayNhanPhong,
    loginLink
  ) {
    const formattedDate = new Date(ngayNhanPhong).toLocaleDateString("vi-VN");

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ƒêƒÉng k√Ω k√Ω t√∫c x√° ƒë∆∞·ª£c duy·ªát</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #059669; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background-color: #f9fafb; padding: 30px; border-radius: 0 0 8px 8px; }
          .button { display: inline-block; background-color: #059669; color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 20px 0; }
          .info-box { background-color: #dcfce7; border: 1px solid #059669; padding: 15px; border-radius: 6px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; padding: 20px; background-color: #f3f4f6; border-radius: 6px; font-size: 14px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üéâ Ch√∫c m·ª´ng! ƒêƒÉng k√Ω ƒë∆∞·ª£c duy·ªát</h1>
          </div>
          
          <div class="content">
            <p>K√≠nh ch√†o <strong>${hoTen}</strong>,</p>
            
            <p>Ch√∫ng t√¥i vui m·ª´ng th√¥ng b√°o r·∫±ng ƒëƒÉng k√Ω k√Ω t√∫c x√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c <strong>DUY·ªÜT TH√ÄNH C√îNG</strong>!</p>
            
            <div class="info-box">
              <h3>üìã Th√¥ng tin ph√≤ng ·ªü ƒë∆∞·ª£c ph√¢n b·ªï:</h3>
              <ul>
                <li><strong>M√£ sinh vi√™n:</strong> ${maSinhVien}</li>
                <li><strong>Ph√≤ng:</strong> ${tenPhong}</li>
                <li><strong>Gi∆∞·ªùng:</strong> ${soGiuong}</li>
                <li><strong>Ng√†y nh·∫≠n ph√≤ng:</strong> ${formattedDate}</li>
              </ul>
            </div>
            
            <p>B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng ƒë·ªÉ xem chi ti·∫øt v√† theo d√µi th√¥ng tin thanh to√°n:</p>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${loginLink}" class="button">üîë ƒêƒÉng nh·∫≠p h·ªá th·ªëng</a>
            </div>
            
            <div style="background-color: #fef3c7; border: 1px solid #f59e0b; padding: 15px; border-radius: 6px; margin: 20px 0;">
              <p style="margin: 0; color: #92400e;"><strong>üìù C√°c b∆∞·ªõc ti·∫øp theo:</strong></p>
              <ol style="margin: 10px 0 0 0; color: #92400e;">
                <li>Thanh to√°n ti·ªÅn ph√≤ng theo h∆∞·ªõng d·∫´n</li>
                <li>Chu·∫©n b·ªã gi·∫•y t·ªù c·∫ßn thi·∫øt</li>
                <li>ƒê·∫øn nh·∫≠n ph√≤ng ƒë√∫ng th·ªùi gian</li>
                <li>Tu√¢n th·ªß n·ªôi quy k√Ω t√∫c x√°</li>
              </ol>
            </div>
            
            <p><strong>üè† ƒê·ªãa ch·ªâ k√Ω t√∫c x√°:</strong><br>
            180 Cao L·ªó, Ph∆∞·ªùng 4, Qu·∫≠n 8, TP HCM</p>
            
            <p><strong>üìû Li√™n h·ªá h·ªó tr·ª£:</strong><br>
            - Hotline: 0929812000<br>
            - Email: ktx@stu.edu.vn</p>
          </div>
          
          <div class="footer">
            <p><strong>üè¢ Ph√≤ng Qu·∫£n l√Ω K√Ω t√∫c x√°</strong><br>
            Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n<br>
            Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi t·∫°i k√Ω t√∫c x√°!</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Template email t·ª´ ch·ªëi ƒëƒÉng k√Ω
   */
  getRejectionEmailTemplate(hoTen, lyDoTuChoi) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Th√¥ng b√°o t·ª´ ch·ªëi ƒëƒÉng k√Ω</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #dc2626; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background-color: #f9fafb; padding: 30px; border-radius: 0 0 8px 8px; }
          .info-box { background-color: #fecaca; border: 1px solid #dc2626; padding: 15px; border-radius: 6px; margin: 20px 0; }
          .contact-box { background-color: #dbeafe; border: 1px solid #2563eb; padding: 15px; border-radius: 6px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; padding: 20px; background-color: #f3f4f6; border-radius: 6px; font-size: 14px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üìã Th√¥ng b√°o v·ªÅ ƒëƒÉng k√Ω k√Ω t√∫c x√°</h1>
          </div>
          
          <div class="content">
            <p>K√≠nh ch√†o <strong>${hoTen}</strong>,</p>
            
            <p>Ch√∫ng t√¥i xin th√¥ng b√°o r·∫±ng ƒëƒÉng k√Ω k√Ω t√∫c x√° c·ªßa b·∫°n kh√¥ng ƒë∆∞·ª£c duy·ªát trong ƒë·ª£t n√†y.</p>
            
            <div class="info-box">
              <h3>üìù L√Ω do kh√¥ng duy·ªát:</h3>
              <p>${lyDoTuChoi}</p>
            </div>
            
            <p>Ch√∫ng t√¥i r·∫•t ti·∫øc v·ªÅ quy·∫øt ƒë·ªãnh n√†y. B·∫°n c√≥ th·ªÉ:</p>
            <ul>
              <li>üîÑ ƒêƒÉng k√Ω l·∫°i trong ƒë·ª£t ti·∫øp theo</li>
              <li>üìû Li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† h·ªó tr·ª£</li>
              <li>üìù C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªÉ ph√π h·ª£p h∆°n v·ªõi y√™u c·∫ßu</li>
            </ul>
            
            <div class="contact-box">
              <p style="margin: 0; color: #1e40af;"><strong>üìû Th√¥ng tin li√™n h·ªá:</strong></p>
              <ul style="margin: 10px 0 0 0; color: #1e40af;">
                <li>Hotline: 0929812000</li>
                <li>Email: ktx@stu.edu.vn</li>
                <li>ƒê·ªãa ch·ªâ: 180 Cao L·ªó, Ph∆∞·ªùng 4, Qu·∫≠n 8, TP HCM</li>
                <li>Gi·ªù l√†m vi·ªác: 8:00 - 17:00 (Th·ª© 2 - Th·ª© 6)</li>
              </ul>
            </div>
            
            <p>C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn k√Ω t√∫c x√° c·ªßa ch√∫ng t√¥i. Ch√∫ng t√¥i hy v·ªçng s·∫Ω c√≥ c∆° h·ªôi ph·ª•c v·ª• b·∫°n trong t∆∞∆°ng lai.</p>
          </div>
          
          <div class="footer">
            <p><strong>üè¢ Ph√≤ng Qu·∫£n l√Ω K√Ω t√∫c x√°</strong><br>
            Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá S√†i G√≤n<br>
            C·∫£m ∆°n b·∫°n ƒë√£ hi·ªÉu v√† th√¥ng c·∫£m!</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }
}

// Kh·ªüi t·∫°o service
const emailService = new EmailService();

// Export c√°c method ƒë·ªÉ s·ª≠ d·ª•ng
module.exports = {
  sendEmail: (emailOptions) => emailService.sendEmail(emailOptions),
  sendVerificationEmail: (to, userName, token) =>
    emailService.sendVerificationEmail(to, userName, token),
  sendPasswordSetupConfirmation: (to, userName, maSinhVien) =>
    emailService.sendPasswordSetupConfirmation(to, userName, maSinhVien),
  sendApprovalEmail: ({
    email,
    hoTen,
    maSinhVien,
    maPhong,
    maGiuong,
    ngayNhanPhong,
  }) =>
    emailService.sendApprovalEmail({
      email,
      hoTen,
      maSinhVien,
      maPhong,
      maGiuong,
      ngayNhanPhong,
    }),
  sendRejectionEmail: ({ email, hoTen, lyDoTuChoi }) =>
    emailService.sendRejectionEmail({ email, hoTen, lyDoTuChoi }),
};
