/**
 * Test script ƒë·ªÉ ki·ªÉm tra API t√≠nh to√°n ng√†y k·∫øt th√∫c h·ª£p ƒë·ªìng
 * Node.js script ƒë·ªÉ test c√°c endpoint v√† logic date calculation
 */

const axios = require("axios");

const API_BASE_URL = "http://localhost:3000/api";

// Test data
const testCases = [
  {
    description: "Test ng√†y h√¥m nay (h·ª£p l·ªá)",
    ngayNhanPhong: new Date().toISOString().split("T")[0],
  },
  {
    description: "Test ng√†y mai (h·ª£p l·ªá)",
    ngayNhanPhong: new Date(Date.now() + 24 * 60 * 60 * 1000)
      .toISOString()
      .split("T")[0],
  },
  {
    description: "Test ng√†y 3 ng√†y sau (h·ª£p l·ªá)",
    ngayNhanPhong: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000)
      .toISOString()
      .split("T")[0],
  },
  {
    description: "Test ng√†y qu√° kh·ª© (kh√¥ng h·ª£p l·ªá)",
    ngayNhanPhong: new Date(Date.now() - 24 * 60 * 60 * 1000)
      .toISOString()
      .split("T")[0],
  },
  {
    description: "Test ng√†y 4 ng√†y sau (kh√¥ng h·ª£p l·ªá)",
    ngayNhanPhong: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000)
      .toISOString()
      .split("T")[0],
  },
  {
    description: "Test ng√†y trong th√°ng 9 (H·ªçc k·ª≥ 1)",
    ngayNhanPhong: "2024-09-15",
  },
  {
    description: "Test ng√†y trong th√°ng 2 (H·ªçc k·ª≥ 2)",
    ngayNhanPhong: "2025-02-15",
  },
  {
    description: "Test ng√†y trong th√°ng 6 (H·ªçc k·ª≥ h√®)",
    ngayNhanPhong: "2024-06-15",
  },
];

async function testCalculateEndDate() {
  console.log("üß™ Testing Calculate End Date API...\n");

  for (const testCase of testCases) {
    try {
      console.log(`üìÖ ${testCase.description}`);
      console.log(`   Ng√†y nh·∫≠n ph√≤ng: ${testCase.ngayNhanPhong}`);

      const response = await axios.post(
        `${API_BASE_URL}/registration/calculate-end-date`,
        {
          ngayNhanPhong: testCase.ngayNhanPhong,
        }
      );

      if (response.data.success) {
        console.log(`   ‚úÖ Th√†nh c√¥ng:`);
        console.log(
          `      Ng√†y t√≠nh ti·ªÅn ph√≤ng d·ª± ki·∫øn: ${
            response.data.data.ngayTinhTienPhongDuKien ||
            response.data.data.ngayKetThucHopDong
          }`
        );
        if (response.data.data.thongTinTinhToan) {
          const info = response.data.data.thongTinTinhToan;
          console.log(
            `      Ghi ch√∫: ${info.calculation || "T√≠nh to√°n theo qu√Ω"}`
          );
        }
      } else {
        console.log(`   ‚ùå Th·∫•t b·∫°i: ${response.data.message}`);
      }
    } catch (error) {
      if (error.response && error.response.data) {
        console.log(`   ‚ùå L·ªói: ${error.response.data.message}`);
        if (error.response.data.errors) {
          console.log(
            `      Chi ti·∫øt: ${error.response.data.errors.join(", ")}`
          );
        }
      } else {
        console.log(`   ‚ùå L·ªói k·∫øt n·ªëi: ${error.message}`);
      }
    }
    console.log("");
  }
}

async function testCompleteRegistration() {
  console.log("üß™ Testing Complete Registration Flow...\n");

  const registrationData = {
    email: `test.${Date.now()}@student.stu.edu.vn`,
    hoTen: "Nguy·ªÖn Test User",
    ngaySinh: "2000-01-15",
    gioiTinh: "Nam",
    soDienThoai: "0987654321",
    maSinhVien: `DH${Math.floor(Math.random() * 100000000)
      .toString()
      .padStart(8, "0")}`,
    ngayNhanPhong: new Date().toISOString().split("T")[0],
    nguyenVong: "T√¥i mu·ªën ·ªü ph√≤ng 4 ng∆∞·ªùi, g·∫ßn th∆∞ vi·ªán, y√™n tƒ©nh ƒë·ªÉ h·ªçc t·∫≠p.",
  };

  try {
    console.log("üìù ƒêang test ƒëƒÉng k√Ω v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin...");
    console.log(`   Email: ${registrationData.email}`);
    console.log(`   M√£ SV: ${registrationData.maSinhVien}`);
    console.log(`   Ng√†y nh·∫≠n ph√≤ng: ${registrationData.ngayNhanPhong}`);
    console.log(`   Nguy·ªán v·ªçng: ${registrationData.nguyenVong}`);

    const response = await axios.post(
      `${API_BASE_URL}/registration/register`,
      registrationData
    );

    if (response.data.success) {
      console.log("   ‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!");
      console.log(`      M√£ ƒëƒÉng k√Ω: ${response.data.data.maDangKy}`);
      console.log(`      Message: ${response.data.message}`);
    } else {
      console.log(`   ‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i: ${response.data.message}`);
    }
  } catch (error) {
    if (error.response && error.response.data) {
      console.log(`   ‚ùå L·ªói: ${error.response.data.message}`);
      if (error.response.data.errors) {
        console.log(`      Chi ti·∫øt: ${error.response.data.errors.join(", ")}`);
      }
    } else {
      console.log(`   ‚ùå L·ªói k·∫øt n·ªëi: ${error.message}`);
    }
  }
  console.log("");
}

async function runTests() {
  console.log("üöÄ Starting UC7 Registration System Tests\n");
  console.log("=".repeat(60));

  await testCalculateEndDate();

  console.log("=".repeat(60));

  await testCompleteRegistration();

  console.log("‚ú® Tests completed!");
}

// Run tests
runTests().catch(console.error);
